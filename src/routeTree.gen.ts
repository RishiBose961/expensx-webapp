/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SecurityLoginImport } from './routes/security/login'
import { Route as CreateExpenseImport } from './routes/create/expense'
import { Route as CalcCalcImport } from './routes/calc/calc'
import { Route as analysisStatisticalImport } from './routes/(analysis)/statistical'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ShowCategoryLazyImport = createFileRoute('/show/category')()
const SecurityRegisterLazyImport = createFileRoute('/security/register')()
const CreateBudgetLazyImport = createFileRoute('/create/budget')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ShowCategoryLazyRoute = ShowCategoryLazyImport.update({
  id: '/show/category',
  path: '/show/category',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/show/category.lazy').then((d) => d.Route))

const SecurityRegisterLazyRoute = SecurityRegisterLazyImport.update({
  id: '/security/register',
  path: '/security/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/security/register.lazy').then((d) => d.Route),
)

const CreateBudgetLazyRoute = CreateBudgetLazyImport.update({
  id: '/create/budget',
  path: '/create/budget',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/create/budget.lazy').then((d) => d.Route))

const SecurityLoginRoute = SecurityLoginImport.update({
  id: '/security/login',
  path: '/security/login',
  getParentRoute: () => rootRoute,
} as any)

const CreateExpenseRoute = CreateExpenseImport.update({
  id: '/create/expense',
  path: '/create/expense',
  getParentRoute: () => rootRoute,
} as any)

const CalcCalcRoute = CalcCalcImport.update({
  id: '/calc/calc',
  path: '/calc/calc',
  getParentRoute: () => rootRoute,
} as any)

const analysisStatisticalRoute = analysisStatisticalImport.update({
  id: '/(analysis)/statistical',
  path: '/statistical',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(analysis)/statistical': {
      id: '/(analysis)/statistical'
      path: '/statistical'
      fullPath: '/statistical'
      preLoaderRoute: typeof analysisStatisticalImport
      parentRoute: typeof rootRoute
    }
    '/calc/calc': {
      id: '/calc/calc'
      path: '/calc/calc'
      fullPath: '/calc/calc'
      preLoaderRoute: typeof CalcCalcImport
      parentRoute: typeof rootRoute
    }
    '/create/expense': {
      id: '/create/expense'
      path: '/create/expense'
      fullPath: '/create/expense'
      preLoaderRoute: typeof CreateExpenseImport
      parentRoute: typeof rootRoute
    }
    '/security/login': {
      id: '/security/login'
      path: '/security/login'
      fullPath: '/security/login'
      preLoaderRoute: typeof SecurityLoginImport
      parentRoute: typeof rootRoute
    }
    '/create/budget': {
      id: '/create/budget'
      path: '/create/budget'
      fullPath: '/create/budget'
      preLoaderRoute: typeof CreateBudgetLazyImport
      parentRoute: typeof rootRoute
    }
    '/security/register': {
      id: '/security/register'
      path: '/security/register'
      fullPath: '/security/register'
      preLoaderRoute: typeof SecurityRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/show/category': {
      id: '/show/category'
      path: '/show/category'
      fullPath: '/show/category'
      preLoaderRoute: typeof ShowCategoryLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/statistical': typeof analysisStatisticalRoute
  '/calc/calc': typeof CalcCalcRoute
  '/create/expense': typeof CreateExpenseRoute
  '/security/login': typeof SecurityLoginRoute
  '/create/budget': typeof CreateBudgetLazyRoute
  '/security/register': typeof SecurityRegisterLazyRoute
  '/show/category': typeof ShowCategoryLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/statistical': typeof analysisStatisticalRoute
  '/calc/calc': typeof CalcCalcRoute
  '/create/expense': typeof CreateExpenseRoute
  '/security/login': typeof SecurityLoginRoute
  '/create/budget': typeof CreateBudgetLazyRoute
  '/security/register': typeof SecurityRegisterLazyRoute
  '/show/category': typeof ShowCategoryLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/(analysis)/statistical': typeof analysisStatisticalRoute
  '/calc/calc': typeof CalcCalcRoute
  '/create/expense': typeof CreateExpenseRoute
  '/security/login': typeof SecurityLoginRoute
  '/create/budget': typeof CreateBudgetLazyRoute
  '/security/register': typeof SecurityRegisterLazyRoute
  '/show/category': typeof ShowCategoryLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/statistical'
    | '/calc/calc'
    | '/create/expense'
    | '/security/login'
    | '/create/budget'
    | '/security/register'
    | '/show/category'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/statistical'
    | '/calc/calc'
    | '/create/expense'
    | '/security/login'
    | '/create/budget'
    | '/security/register'
    | '/show/category'
  id:
    | '__root__'
    | '/'
    | '/(analysis)/statistical'
    | '/calc/calc'
    | '/create/expense'
    | '/security/login'
    | '/create/budget'
    | '/security/register'
    | '/show/category'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  analysisStatisticalRoute: typeof analysisStatisticalRoute
  CalcCalcRoute: typeof CalcCalcRoute
  CreateExpenseRoute: typeof CreateExpenseRoute
  SecurityLoginRoute: typeof SecurityLoginRoute
  CreateBudgetLazyRoute: typeof CreateBudgetLazyRoute
  SecurityRegisterLazyRoute: typeof SecurityRegisterLazyRoute
  ShowCategoryLazyRoute: typeof ShowCategoryLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  analysisStatisticalRoute: analysisStatisticalRoute,
  CalcCalcRoute: CalcCalcRoute,
  CreateExpenseRoute: CreateExpenseRoute,
  SecurityLoginRoute: SecurityLoginRoute,
  CreateBudgetLazyRoute: CreateBudgetLazyRoute,
  SecurityRegisterLazyRoute: SecurityRegisterLazyRoute,
  ShowCategoryLazyRoute: ShowCategoryLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(analysis)/statistical",
        "/calc/calc",
        "/create/expense",
        "/security/login",
        "/create/budget",
        "/security/register",
        "/show/category"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/(analysis)/statistical": {
      "filePath": "(analysis)/statistical.tsx"
    },
    "/calc/calc": {
      "filePath": "calc/calc.tsx"
    },
    "/create/expense": {
      "filePath": "create/expense.tsx"
    },
    "/security/login": {
      "filePath": "security/login.tsx"
    },
    "/create/budget": {
      "filePath": "create/budget.lazy.tsx"
    },
    "/security/register": {
      "filePath": "security/register.lazy.tsx"
    },
    "/show/category": {
      "filePath": "show/category.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
